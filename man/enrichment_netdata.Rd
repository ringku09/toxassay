% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pathway-enrichment.R
\name{enrichment_netdata}
\alias{enrichment_netdata}
\title{Generate Enrichment Network Data}
\usage{
enrichment_netdata(
  gene_df,
  category = c("KEGG", "Process", "Component", "Function", "RCTM", "WikiPathways"),
  organism = c("rat", "human"),
  path_n = 10,
  gene_wtcol = "p_value",
  score_threshold = 200,
  version = "12"
)
}
\arguments{
\item{gene_df}{A data frame containing the gene information with a column named \code{gene_symbol}.}

\item{category}{A character string specifying the category for enrichment (default is "KEGG").}

\item{organism}{A character string specifying the organism (default is "rat").}

\item{path_n}{An integer specifying the number of top pathways to return (default is 10).}

\item{gene_wtcol}{A character string specifying the column in \code{gene_df} to use for gene weights (default is "p_value").}

\item{score_threshold}{A numeric value specifying the score threshold for STRING database interactions (default is 200).}

\item{version}{A character string specifying the version of the STRING database (default is "12").}
}
\value{
A list containing two elements:
\item{vertices}{A tibble containing the vertices of the network with columns: \code{name}, \code{count}, \code{p_value}, \code{nodes}, and \code{size}.}
\item{edges}{A tibble containing the edges of the network with columns: \code{from}, \code{to}, and \code{weight}.}
}
\description{
The \code{enrichment_netdata} function generates network like data for gene enrichment analysis based on specified categories such as KEGG pathways.
It maps the genes to pathways, calculates weights, and prepares the data for network visualization.
}
\examples{
\dontrun{
# Sample gene data frame
gene_df <- data.frame(gene_symbol = c("Gene1", "Gene2", "Gene3"))

# Generate enrichment network data for KEGG pathways in rats
net_data <- enrichment_netdata(gene_df, category = "KEGG", organism = "rat")

# View the vertices and edges of the network
print(net_data$vertices)
print(net_data$edges)
}
}
